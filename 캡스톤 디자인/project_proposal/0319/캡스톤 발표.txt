-- 캡스톤 발표 --
1. 
캡스톤 디자인 8조 발표 시작하겠습니다

2. 
무엇을 조사했고 무슨 문제를 발견했으며 어떻게 해결할 것인지에 대해 말씀드리고, 시나리오와 요구사항에 대해 발표하겠습니다.

4. 
저희는 웹소설을 주제로 잡았습니다
더 구체적으로는 작가의 삽화 제작 과정을 조사했습니다

5. 
작가는 삽화를 만들기 위해서 일러스트레이터에게 외주할 수 있습니다.

6.
또 다른 방법으로는 AI 기술을 이용하는 것입니다.
다음과 같이 AI가 그림을 만들어서 대회에서 수상도 하는 등 기술의 발전이 이루어졌습니다.

7.
따라서 텍스트 기반의 이미지 생성 모델 서비스를 제공하는 novelai, midjourney, dalle를 이용하여 작가가 직접 제작할 수도 있습니다.

8. 
또는, 웹 소설 플랫폼에서 제공하는 AI model을 사용할 수도 있습니다.

9. 
이러한 제작 과정을 조사해보니, 다양한 문제점을 발견할 수 있었습니다. 일러스트레이터에게 외주하는 것은 시간, 돈 등의 자원이 많이 소모되고, 심지어는 원하는 등장인물이 나오지 않을 가능성이 있습니다. 또한 작가의 마음대로 수정이 쉽지 않습니다.

10. 
직접 제작하는 방법은 작가가 새로운 분야에 대해 공부해야한다는 필요성이 있습니다. 이 방법은 시간이 오래 걸리고 편리성도 떨어집니다.

11. 
웹 소설 플랫폼에서 제공하는 AI model같은 경우는 제가 앞서 말씀드린 midjourney나 novelai를 가져와서 사용하는 것이기 때문에 불안정하고, 이러한 model은 개인화가 불가능하기 때문에, 표지에만 사용이 가능합니다.

12. 
저희는 이러한 문제점들을 발견하고 이에 대한 해결책을 생각해봤습니다.

13. 
저희는 웹 소설 플랫폼을 바탕으로
자체적인 AI 시스템을 구축하고
일관성 있는 등장인물을 생성할 것입니다.
또한 작가가 다른 분야의 공부를 할 필요가 없도록
간편한 UI를 구성할 것 입니다.

14. 
등장인물을 생성하는 과정에 대한 설명입니다.
흔히 웹 소설을 쓸 때, 작가는 등장인물에 대한 프로필을 작성합니다. 그 정보를 입력하면 civitai에서 제공하는 ai model을 통해 등장인물의 sample을 여러 개 보여줍니다.
작가는 그 sample들 중에 자신이 원하는 등장인물을 하나 선택합니다.

15.
AI model은 작가가 선택한 등장인물에 대해서 다양한 각도, 표정, 배경으로 복제합니다.

여러장 만든 삽화에 dreambooth라는 기법을 적용시켜 여러 상황에도 일관성 있는 등장인물을 생성할 것 입니다.

16. 
이러한 해결책으로 얻는 이점은
작가의 권한 강화, 일관성 있는 삽화 제공, 비용 절감, 시간 단축 등이 있습니다.

17.
다음은 시나리오입니다.

18. 
저희는 작가, 독자, 관리자를 사용자로 정의했습니다.
먼저 간단한 시나리오를 보자면
작가는 메인 화면에서 로그인을 하고 마이 페이지를 거쳐서 등장인물을 생성하거나 글의 수정, 삭제, 등록을 할 수 있습니다

19.
독자는 로그인을 한 뒤, 마이 페이지를 통해 자신이 즐겨찾기한 작품을 보거나 새로운 작품을 읽을 수 있습니다.

20.
관리자는 코드 관리, 메뉴, 권한, 데이터베이스를 관리합니다

21. 
저희의 주 타겟은 작가이기 때문에 주요 시나리오 3개를 더 소개해 드리겠습니다. 
첫 번쨰는 등장인물 학습에 대한 시나리오입니다.
작가는 마이페이지의 등장인물 생성기 기능을 이용할 수 있습니다. 프로필을 기반으로 tag를 선택하면 ai는 등장인물을 생성합니다. 그 중에서 하나를 고르면 해당 등장인물을 다양한 각도, 배경, 표정에 대해 복제합니다. 다시 그 복제된 삽화를 dreambooth 기법을 적용시켜 개인화를 시켜줍니다.

22. 
작가가 원하는 등장인물에 대해서 학습을 시켰으므로, 이제 생성을 할 수 있습니다. 마찬가지로 등장인물 생성기 기능을 통해 정보를 제공하면, 해당 ai model을 불러옵니다. 추가적으로 상황 묘사를 통해 원하는 삽화를 생성할 수 있습니다.

23. 
다음은 글 작성입니다.
마이페이지의 글 작성 기능을 이용하여 글을 쓰면서, 중간에 삽화를 첨부할 수 있습니다. 마지막으로는 표지를 선택함으로써, 글을 저장합니다.

24.
유저 요구사항입니다.
작가는 구체적인 등장인물을 생성할 수 있어야 하고

AI에 대한 사전지식없이 쉽게 이용이 가능해야 합니다.

25. 
소설은 스토리가 있는 글이기 때문에 매 회차마다 등장인물이 달라지면 안됩니다. 따라서 일관성 있는 등장인물 생성이 필요합니다.
또한 생성된 이미지에 대해서 즉각적인 수정이 가능해야 합니다.

26.
독자의 요구사항입니다.
구독한 작가의 작품이 올라오면 알림이 와야하고
댓글과 평점을 남김으로써 작가와 다른 독자들과 소통할 수 있어야 합니다.

27.
공통 요구사항으로는 요일, 장르 별로 작품을 볼 수 있어야 하고 검색 기능이 있어야 합니다.

28.
다음은 기능 요구사합입니다.
공통 기능 사항으로는 메인 화면이 있습니다.
장르 요일을 선택할 수 있는 메뉴, 로그인의 기능, 유저별로 마이페이지가 나눠져야 합니다.

29.
작가의 기능 요구사항은 
구체적이고 다양한 태그를 선택할 수 있는 기능이 필요합니다.
그 태그를 바탕으로 등장인물을 생성할 수 있는 기능
생성한 등장인물을 저장하고 ai model을 불러오는 기능이 필요합니다.

30.
작가는 글을 써야 하므로 소설의 쓰기, 수정, 등록 기능과 삽화를 첨부할 수 있는 기능이 필요합니다.

31.
관리자는 AI와 웹 코드를 관리할 수 있는 기능과 ai model 학습, 저장할 수 있는 기능이 필요합니다.

32.
유저에 대한 권한 부여 및 삭제 기능도 필요합니다.

33.
다음은 계획입니다.

34.
7주차까지는 설계를 합니다.
5주차에는 ai, 6주차는 웹을, 7주차에는 ai와 웹을 연결하는 interface에 대한 설계를 할 것 입니다.
9주차부터 12주차까지는 구현 및 debugging을 할 것 이고 이후는 문서화 및 발표준비입니다.

35. 
AI 설계 및 구현은 고범석, 박준서 팀원이
웹 설계 및 구현은 한진섭 팀원이
디자인 및 문서화는 정재현 팀원이 담당합니다.

36.
이상입니다.

==== 발표 2번째 : 종합 설계 ====

1.
다음은 AI 설계입니다

2.
개발 환경은 gpu A5000, python 3.9.0, pytorch 1.12 이상을 사용할 예정입니다.

3.
저희가 사용하는 AI model은, stable diffusion 1.5를 base model로 사용을 하고 구성 요소는 tokenizer, text encoder, Unet, Scheduler, VAE가 있습니다.

3.
Process 개요입니다.
web server와는 독립적으로 운영을 하고, python을 기반으로 동작합니다. server 구동을 위해 Flask와 엔진엑스를 사용합니다.
또한, AI model을 구동하기 위해 torch가 있고 python script로 invokeai라는 image 생성 application, image, seed, prompt를 다룹니다.

4.
AI의 기능은 크게 등장인물 sample 생성, 등장인물 학습, 등장인물 삽화 생성의 3가지로 나눌 수 있습니다.

5.
첫 번째 기능은 등장인물 sample 생성으로써, 작가가 원하는 등장인물을 선택할 때 사용하는 기능입니다.
input은 Tag가 들어가고 output으로는 사진 4장이 나옵니다.

6.
tag는 character tag로써 인물의 생김새를 정의하는 부분이기에 정적인 tag 위주로 들어갑니다.

7.
해당 tag를 바탕으로 사진을 생성할 껀데, 이때 사용하는 ai model은 2개입니다. 다양한 작화를 고려하여 2가지로 선정을 했고 각 style은 anime style, midjourney style이 있습니다.
또한 쉬운 생성을 위해 invokeai라는 application을 사용하여 사진을 4장 생성합니다.

8.
해당 기능에서 사용하는 내부 기능이 2가지가 존재하는데 시간 관계상 언급만 드리고 설명은 생략하겠습니다.
흔히 이미지를 생성할때 발생하는 문제점으로 손이나 발의 뭉개짐이 존재하는데 이걸 방지하기 위한 목적으로 textual inversion과 auto-inpainting을 사용합니다.

9.
두번째 기능은 등장인물 학습입니다.
작가가 선택한 등장인물을 학습하는 기능입니다.
input은 tag, instance prompt라는 등장인물의 별명, seed, image이고
output은 ckpt file의 학습된 AI model이 나옵니다.

10.
input으로 image가 들어가는데, 작가가 선택한 사진 한장으로는 dataset이 부족하기 때문에 해당 사진을 가지고 data 양을 늘려줘야 합니다. 따라서 사진의 seed, tag를 가지고 20장으로 data를 늘려줍니다.

11.
그 후, 복제한 이미지 20장과 instance prompt라는 등장인물을 정의하는 단어와 함께 input으로 넣어, dreambooth 기법을 통해 학습을 진행해줍니다.
output은 AI model입니다.

12.
학습 시, 실제 input은 다음과 같습니다.

13.
마지막 기능은 등장인물 삽화 생성입니다.
작가가 선택한 등장인물을 일관성 있게 뽑아주는 기능입니다.
input은 tag, instance prompt가 들어가고
output은 사진 4장입니다.

14.
tag는 등장인물의 행동을 정의하는 정적인 tag 위주로 들어가고

15.
해당 tag와 instance prompt를 넣어서 이미지를 4장 뽑을 수 있습니다.

16.
실제 input은 다음과 같습니다. 

17.
삽화 생성의 기능은 목적에 따라 또 다시 3가지로 나눌 수 있습니다.
첫 번째 세부 기능으로는 예시와 같이 tag를 기반으로 삽화를 생성하는 기능입니다.

18.
두 번째 세부 기능은 사진의 크기를 늘려주는 기능입니다. 표지의 경우 해당 기능을 이용하여 뽑을 예정입니다.

19.
세 번째 세부 기능은 inpainting입니다. 작가가 직접 원하는 부분을 수정할 수 있는 기능입니다.

20.
inpainting의 process는 다음과 같이 python module을 이용하여 그림판에 이미지를 띄우고 masking을 해줄 것 입니다.

21.
지금까지 설명한 3가지의 main process를 다이어그램으로 표현한 사진입니다.

22.
다음은 AI model의 함수 설계입니다.
먼저 명명 규칙과 용어 정의를 하였고,

23.
함수의 이름 및 기능을 정의했습니다.
해당 함수들을 다이어그램으로 표현해보면 다음과 같습니다.

24.
자세히 살펴 보면,

25.
위는 변수의 타입 아래는 함수의 이름 및 return type입니다. command로 시작하는 script들의 경우 invokeai application을 실행시켜 이미지를 뽑는 script입니다.

25.
response_image의 경우 web platform으로부터 온 request에 대해서 image를 담아 응답하는 script입니다.

26.
다음은 학습에 사용되는 script입니다. random_generator로 등장인물 별명을 뽑아주고, dreambooth training으로 학습을 진행합니다

27.
이 script의 경우, 다른 script를 상속받는 script입니다. server를 구동하고 경로에 맞게 함수를 실행시켜줍니다.

28.
interface 설계입니다.

29.
 protocol은 HTTP protocol을 사용하고
json format으로 통신합니다. 이때 주고 받는 data는 byte 형식의 image, string입니다.

30.
또한 경로에 따라 기능을 다르게 제공해 줄 것 입니다. 예시로 txt2img의 경우 tag를 기반으로 삽화를 제공하는 형태입니다.

31.
저희는 interface 설계 시 다수의 user를 고려했습니다. 따라서 multi threading을 통해 동시에 이미지를 제공할 것이고, 해당 user에 맞는 사진을 제공할 것 입니다.

32.  
inferface list는 다음과 같습니다.

33.
그 중 하나를 살펴보자면, 웹에서 송신하고 AI가 받는 interface로 input으로 user id, prompt를 주면 이미지를 받는 형식입니다.

34.
이렇게 총 18가지의 interface를 설계해봤고, 자료가 많아서 중요 부분 위주로 설명드렸는데, 궁금한 점 있으시면 답변해 드리겠습니다. 이상입니다.


















	










